<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Crypto Monitor</title>
    <script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>

    <style>
      @import url("https://www.google.com/search?q=https://fonts.googleapis.com/css2%3Ffamily%3DInter:wght%40400%3B600%26display%3Dswap");
      body {
        font-family: "Inter", sans-serif;
        background-color: #f3f4f6;
        color: #1f2937;
      }
    </style>
  </head>
  <body>
    <div class="max-w-4xl mx-auto bh-white p-6 rounded-xl shadow-lg">
        <h1 class="text-3xl font-bold mb-6 text-center text-indigo-600">Crypto Price Monitor</h1>

        <!-- price display -->
         <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">

            <!-- bitcoin card -->
            <div class="bg-gray-100 p-6 rounded-xl shadow-md">
                <h2 class="text-2xl font-semibold mb-2 text-gray-800 flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-yellow-500 mr-2" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM7 9a1 1 0 000 2h6a1 1 0 100-2H7z" clip-rule="evenodd" />
                </svg>
                Bitcoin (BTC)
                </h2>
                <p class="text-4xl font-extrabold text-green-600" id="btc-price">Loading...</p>
                <p class="text-sm text-gray-500 mt-1">Last Updated: <span id="btc-last-updated"></span></p>
            </div>
            <!-- Ethereum card -->
            <div class="bg-gray-100 p-6 rounded-xl shadow-md">
                <h2 class="text-2xl font-semibold mb-2 text-gray-800 flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-blue-500 mr-2" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM7 9a1 1 0 000 2h6a1 1 0 100-2H7z" clip-rule="evenodd" />
                </svg>
                Ethereum (ETH)
                </h2>
                 <p class="text-4xl font-extrabold text-green-600" id="eth-price">Loading...</p>
                <p class="text-sm text-gray-500 mt-1">Last Updated: <span id="eth-last-updated"></span></p>
            </div>
         </div>

         <!-- alert section -->
         <div class="bg-gray-100 p-6 rounded-xl shadow-lg mb-8 border border-gray-200">
            <h2 class="text-2xl font-semibold mb-4 text-center text-orange-600">Set a Price Alert</h2>

            <form id="alert-form" method="post" class="space-y-4">
                <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                    <div>
                    <label for="crypto-select" class="block text-sm font-medium text-gray-700">Cryptocurrency</label>
                    <select id="crypto-select" name="crypto" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
                        <option value="bitcoin">Bitcoin</option>
                        <option value="ethereum">Ethereum</option>
                    </select>
                    </div>

                      <div>
                    <label for="direction-select" class="block text-sm font-medium text-gray-700">Direction</label>
                    <select id="direction-select" name="direction" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
                        <option value="above">Above</option>
                        <option value="below">Below</option>
                    </select>
                </div>

                    <div>
                    <label for="target-price" class="block text-sm font-medium text-gray-700">Target Price (USD)</label>
                    <input type="number" id="target-price" name="targetPrice" step="0.01" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" placeholder="e.g., 50000" required>
                    </div>

                </div>

                <button type="submit" class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                    Set Alert
                </button>
            </form>
         </div>
         
         <!-- alerts log section -->
         <div class="bg-white p-6 rounded-xl shadow-lg border border-gray-200">
            <h2 class="text-2xl font-semibold mb-4 text-center text-rose-600">Alerts Log</h2>
            <div class="space-y-3 max-h-60 overflow-y-auto" id="alerts-container">
                <p class="text-gray-500 text-center">Waiting for alerts...</p>
            </div>
         </div>

    </div>
  </body>
</html>

<script>
    const btcPriceElem = document.getElementById('btc-price');
    const ethPriceElem = document.getElementById('eth-price');
    const btcLastUpdatedElem = document.getElementById('btc-last-updated');
    const ethLastUpdatedElem = document.getElementById('eth-last-updated');
    const alertsContainer = document.getElementById('alerts-container');
    const alertForm = document.getElementById('alert-form')
    // fetch the price from backend
    async function fetchPrices(){
        try {
            const res = await fetch("/api/prices");
            if(!res.ok){
                // Log error if backend returns a non-success status
            console.error(`Error Fetching prices: Server returned status ${res.status}`);
            // Throw an error to ensure code goes to the catch block
            throw new Error(`Server error: ${res.status}`);
            } 
            // only read the body onec here:
            const data = await res.json();

            // update bitcoin priec here:
            if(data.bitcoin && data.bitcoin.price){

                btcPriceElem.textContent = `$${parseFloat(data.bitcoin.price).toFixed(2)}`;
                btcLastUpdatedElem.textContent = new Date(data.bitcoin.updated).toLocaleTimeString();
    
            }
            // update the ethereum price here:
            if(data.ethereum && data.ethereum.price){

                ethPriceElem.textContent = `$${parseFloat(data.ethereum.price).toFixed(2)}`;
                ethLastUpdatedElem.textContent = new Date(data.ethereum.updated).toLocaleTimeString();
            }
                console.log(res.json())


        } catch (err) {
            console.error("Error Fetching prices:",err)
        }
    }
    // fetch the alert from backend
    async function fetchAlerts(){
        try {
            const res = await fetch("/api/alerts");
            const data = await res.json();
            console.log("Fetch alert data: ",data);
            
            alertsContainer.innerHTML =""
            if(data.length === 0){
                alertsContainer.innerHTML = `<p class="text-gray-500 text-center">No alerts yet.</p>`
            } else{
                data.forEach(alert =>{
                    const div = document.createElement('div');
                    div.className = "p-4 bg-gray-200 rounded-md";
                    div.innerHTML = `${alert.crypto.toUpperCase()} hit target $${alert.targetPrice} at ${new Date(alert.triggeredAt).toLocaleTimeString()}`;
                    alertsContainer.appendChild(div);
                })
            }
        } catch (err) {
            console.error("Error fetching alerts: ",err);
            
        }
    }

    // handle form submission for new alerts
    alertForm.addEventListener("submit", async (e) =>{
        e.preventDefault();
        const crypto = document.getElementById("crypto-select").value;
        const targetPrice = document.getElementById("target-price").value;
        const direction = document.getElementById("direction-select").value;
        try {
            const res = await fetch("/api/add/alerts",{
            method:"POST",
            headers:{
                "Content-Type":"application/json"
            },
            body:JSON.stringify({crypto, targetPrice,direction}),
            });
           
            if(res.ok){
                alertForm.reset();
                alert("Alert set successfully!")
            } else{
                const errorData = await res.json();
                alert(`Failed to set alert: ${errorData.error}`)
            }


        } catch (error) {
            console.error("Error setting alert:",error);
            alert("An error occurred while setting the alert.")
            
        }
    })
    // set the interval for update the price in 5s
    setInterval(()=>{
        fetchPrices();
        fetchAlerts();
    },5000);

    // init call/invoke the function
    fetchPrices();
    fetchAlerts();
</script>